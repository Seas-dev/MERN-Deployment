{"version":3,"sources":["components/CreatePet.js","components/AllPets.js","components/EditPet.js","components/PetDetails.js","App.js","serviceWorker.js","index.js"],"names":["CreatePet","props","useState","name","setName","type","setType","description","setDescription","skill1","setSkill1","skill2","setSkill2","skill3","setSkill3","likes","errors","setErrors","allPetNames","setAllPetNames","uniErr","setUniErr","uni","setUni","useEffect","axios","get","then","res","data","catch","err","console","log","className","onSubmit","e","preventDefault","i","length","post","navigate","htmlFor","id","onChange","target","value","message","to","AllPets","pets","setPets","map","pet","key","_id","EditPet","put","defaultValue","PetDetails","setPet","setLikes","dis","setDis","disabled","onClick","delete","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c33325f9.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Link, navigate } from '@reach/router'; \r\n\r\nconst CreatePet = props => {\r\n    const [ name, setName ] = useState(\"\");\r\n    const [ type, setType ] = useState(\"\");\r\n    const [ description, setDescription ] = useState(\"\");\r\n    const [ skill1, setSkill1 ] = useState(\"\");\r\n    const [ skill2, setSkill2 ] = useState(\"\");\r\n    const [ skill3, setSkill3 ] = useState(\"\");\r\n    const [ likes, setLikes ] = useState(0);\r\n    const [ errors, setErrors ] = useState({});\r\n    const [ allPetNames, setAllPetNames ] = useState([]);\r\n    const [ uniErr, setUniErr ] = useState(\"\");\r\n    const [ uni, setUni ] = useState(false);\r\n\r\n    useEffect (() => {\r\n        axios.get(\"http://localhost:8000/api/pets\")\r\n          .then(res => setAllPetNames(res.data))\r\n          .catch(err => console.log(err));\r\n      }, []);\r\n      \r\n    const onSubmitHandler = e => {\r\n        e.preventDefault();\r\n        for(let i = 0; i < allPetNames.length; i++)\r\n        {\r\n            if(allPetNames[i].name === name){\r\n                setUniErr(\"That name is already taken.\")\r\n                setUni(false);\r\n            }\r\n            else {\r\n                setUni(true);\r\n            }\r\n\r\n        }\r\n        if(uni){\r\n            axios.post(\"http://localhost:8000/api/newPet\", {\r\n                name,\r\n                type,\r\n                description,\r\n                skill1,\r\n                skill2,\r\n                skill3,\r\n                likes\r\n            })\r\n            .then(res=>{\r\n                if(res.data.errors) {\r\n                    setErrors(res.data.errors);\r\n                } else {\r\n                    navigate('/');\r\n                }})\r\n            .catch(err=>console.log(err));\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col\">\r\n                <h3>Know of a pet needing a home?</h3>\r\n                <form onSubmit={onSubmitHandler} >\r\n                    <div className=\"form-entry\">\r\n                        <label htmlFor=\"pname\">Pet name:</label>\r\n                        <input \r\n                            type=\"text\" \r\n                            name=\"pname\" \r\n                            id=\"pname\" \r\n                            className=\"form-control\"\r\n                            onChange={ e => setName(e.target.value)}\r\n                        />\r\n                        <span className=\"text-danger\">{errors.name ? errors.name.message : \"\"}</span>\r\n                        <span className=\"text-danger\">{uni ? uniErr : \"\"}</span>\r\n                    </div>\r\n                    <div className=\"form-entry\">\r\n                        <label htmlFor=\"ptype\">Pet type:</label>\r\n                        <input \r\n                            type=\"text\" \r\n                            name=\"ptype\" \r\n                            id=\"ptype\" \r\n                            className=\"form-control\"\r\n                            onChange={ e => setType(e.target.value)}\r\n                        />\r\n                        <span className=\"text-danger\">{errors.type ? errors.type.message : \"\"}</span>\r\n                    </div>\r\n                    <div className=\"form-entry\">\r\n                        <label htmlFor=\"pdescription\">Description:</label>\r\n                        <input \r\n                            type=\"text\" \r\n                            name=\"pdescription\" \r\n                            id=\"pdescription\" \r\n                            className=\"form-control\"\r\n                            onChange={ e => setDescription(e.target.value)}\r\n                        />\r\n                        <span className=\"text-danger\">{errors.description ? errors.description.message : \"\"}</span>\r\n                    </div>\r\n                    <p>Skills:</p>\r\n                    <div className=\"pl-4 mb-3\">\r\n                        <div className=\"form-entry\">\r\n                            <label htmlFor=\"pskill1\">Skill 1:</label>\r\n                            <input \r\n                                type=\"text\" \r\n                                name=\"pskill1\" \r\n                                id=\"pskill1\" \r\n                                className=\"form-control\"\r\n                                onChange={ e => setSkill1(e.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-entry\">\r\n                            <label htmlFor=\"pskill2\">Skill 2:</label>\r\n                            <input \r\n                                type=\"text\" \r\n                                name=\"pskill2\" \r\n                                id=\"pskill2\" \r\n                                className=\"form-control\"\r\n                                onChange={ e => setSkill2(e.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-entry\">\r\n                            <label htmlFor=\"pskill3\">Skill 3:</label>\r\n                            <input \r\n                                type=\"text\" \r\n                                name=\"pskill3\" \r\n                                id=\"pskill3\" \r\n                                className=\"form-control\"\r\n                                onChange={ e => setSkill3(e.target.value)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <input type=\"submit\" value=\"Add pet\" className=\"btn btn-primary\"/>\r\n                    <Link to=\"/\">\r\n                        <button className=\"btn btn-danger float-right\">Cancel</button>\r\n                    </Link>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreatePet;","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Link } from '@reach/router';\r\n\r\nconst AllPets = props => {\r\n    const [ pets, setPets ] = useState([]);\r\n\r\n    useEffect (() => {\r\n        axios.get(\"http://localhost:8000/api/pets\")\r\n          .then(res => setPets(res.data))\r\n          .catch(err => console.log(err));\r\n      }, []);\r\n\r\n      return (\r\n          <div className=\"row\">\r\n              <div className=\"col\">\r\n              <h3>These pets are looking for a home!</h3>\r\n              <Link to=\"/pets/new\" className=\"bigger\">Add a pet to the shelter</Link>\r\n                  <table className=\"table table-dark table-striped mt-2\">\r\n                      <thead>\r\n                          <tr>\r\n                              <th>Name</th>\r\n                              <th>Type</th>\r\n                              <th>Actions</th>\r\n                          </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                          {\r\n                            pets.map(pet =>\r\n                                <tr key={pet._id}>\r\n                                    <td>{pet.name}</td>\r\n                                    <td>{pet.type}</td>\r\n                                    <td>\r\n                                        <Link to={`/pets/${pet._id}`} className=\"btn btn-outline-info mr-3\">Details</Link>\r\n                                         | \r\n                                        <Link to={`/pets/${pet._id}/edit`} className=\"btn btn-outline-warning ml-3\">Edit</Link>\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                          }\r\n                      </tbody>\r\n                  </table>\r\n              </div>\r\n          </div>\r\n      );    \r\n}\r\n\r\nexport default AllPets;","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Link, navigate } from '@reach/router';\r\n\r\n\r\nconst EditPet = props => {\r\n    const { _id } = props;\r\n    const [ name, setName ] = useState(\"\");\r\n    const [ type, setType ] = useState(\"\");\r\n    const [ description, setDescription ] = useState(\"\");\r\n    const [ skill1, setSkill1 ] = useState(\"\");\r\n    const [ skill2, setSkill2 ] = useState(\"\");\r\n    const [ skill3, setSkill3 ] = useState(\"\");\r\n    const [ errors, setErrors ] = useState({});\r\n\r\n    useEffect (() => {\r\n        axios.get(`http://localhost:8000/api/pets/${_id}`)\r\n          .then(res => {\r\n              setName(res.data.name);\r\n              setType(res.data.type);\r\n              setDescription(res.data.description);\r\n              setSkill1(res.data.skill1);\r\n              setSkill2(res.data.skill2);\r\n              setSkill3(res.data.skill3);\r\n            })\r\n          .catch(err => console.log(err));\r\n      }, [_id]);\r\n\r\n      const onSubmitHandler = e => {\r\n        e.preventDefault();\r\n        axios.put(`http://localhost:8000/api/pets/${_id}`, {\r\n            name,\r\n            type,\r\n            description,\r\n            skill1,\r\n            skill2,\r\n            skill3,\r\n        })\r\n        .then(res=>{\r\n            if(res.data.errors) {\r\n                setErrors(res.data.errors);\r\n            } else {\r\n                navigate(`/pets/${_id}`);\r\n            }})\r\n        .catch(err=>console.log(err));\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col\">\r\n                <h3>Edit this pet</h3>\r\n                <form onSubmit={onSubmitHandler} >\r\n                    <div className=\"form-entry\">\r\n                        <label htmlFor=\"pname\">Pet name:</label>\r\n                        <input \r\n                            type=\"text\" \r\n                            name=\"pname\" \r\n                            id=\"pname\" \r\n                            className=\"form-control\"\r\n                            onChange={ e => setName(e.target.value)}\r\n                            defaultValue={name}\r\n                        />\r\n                        <span className=\"text-danger\">{errors.name ? errors.name.message : \"\"}</span>\r\n                    </div>\r\n                    <div className=\"form-entry\">\r\n                        <label htmlFor=\"ptype\">Pet type:</label>\r\n                        <input \r\n                            type=\"text\" \r\n                            name=\"ptype\" \r\n                            id=\"ptype\" \r\n                            className=\"form-control\"\r\n                            onChange={ e => setType(e.target.value)}\r\n                            defaultValue={type}\r\n                        />\r\n                        <span className=\"text-danger\">{errors.type ? errors.type.message : \"\"}</span>\r\n                    </div>\r\n                    <div className=\"form-entry\">\r\n                        <label htmlFor=\"pdescription\">Description:</label>\r\n                        <input \r\n                            type=\"text\" \r\n                            name=\"pdescription\" \r\n                            id=\"pdescription\" \r\n                            className=\"form-control\"\r\n                            onChange={ e => setDescription(e.target.value)}\r\n                            defaultValue={description}\r\n                        />\r\n                        <span className=\"text-danger\">{errors.description ? errors.description.message : \"\"}</span>\r\n                    </div>\r\n                    <p>Skills:</p>\r\n                    <div className=\"pl-4 mb-3\">\r\n                        <div className=\"form-entry\">\r\n                            <label htmlFor=\"pskill1\">Skill 1:</label>\r\n                            <input \r\n                                type=\"text\" \r\n                                name=\"pskill1\" \r\n                                id=\"pskill1\" \r\n                                className=\"form-control\"\r\n                                onChange={ e => setSkill1(e.target.value)}\r\n                                defaultValue={skill1}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-entry\">\r\n                            <label htmlFor=\"pskill2\">Skill 2:</label>\r\n                            <input \r\n                                type=\"text\" \r\n                                name=\"pskill2\" \r\n                                id=\"pskill2\" \r\n                                className=\"form-control\"\r\n                                onChange={ e => setSkill2(e.target.value)}\r\n                                defaultValue={skill2}\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-entry\">\r\n                            <label htmlFor=\"pskill3\">Skill 3:</label>\r\n                            <input \r\n                                type=\"text\" \r\n                                name=\"pskill3\" \r\n                                id=\"pskill3\" \r\n                                className=\"form-control\"\r\n                                onChange={ e => setSkill3(e.target.value)}\r\n                                defaultValue={skill3}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <input type=\"submit\" value=\"Edit pet\" className=\"btn btn-primary\"/>\r\n                    <Link to=\"/\">\r\n                        <button className=\"btn btn-danger float-right\">Cancel</button>\r\n                    </Link>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EditPet;","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Link, navigate } from '@reach/router';\r\n\r\nconst PetDetails = props => {\r\n    const { _id } = props;\r\n    const [ pet, setPet ] = useState({});\r\n    const [ likes, setLikes ] = useState(0);\r\n    const [ dis, setDis ] = useState(false);\r\n\r\n    useEffect (() => {\r\n        axios.get(`http://localhost:8000/api/pets/${_id}`)\r\n          .then(res => {\r\n              setPet(res.data);\r\n              setLikes(res.data.likes);\r\n            })\r\n          .catch(err => console.log(err));\r\n    }, [_id,dis]);\r\n\r\n    const likePet = () => {\r\n        setDis(true);\r\n        axios.put(`http://localhost:8000/api/like/${_id}`, {likes})\r\n            .then(res => console.log(res))\r\n            .catch(err=>console.log(err));\r\n    }\r\n\r\n    const adoptPet = () => {\r\n        axios.delete(`http://localhost:8000/api/pets/${_id}`)\r\n        .then(res => {\r\n            navigate(\"/\");\r\n        })\r\n        .catch(err=>console.log(err));\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <h3>Details about {pet.name}</h3>\r\n                    <Link to=\"/\" className=\"float-right bigger mr-5\">Home</Link>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-2 text-center\">\r\n                    <p className=\"bigger\">Pet Type:</p>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <p>{pet.type}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-2 text-center\">\r\n                    <p className=\"bigger\">Description:</p>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <p>{pet.description}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-2 text-center\">\r\n                    <p className=\"bigger\">Skills:</p>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <p>{pet.skill1}</p>\r\n                    <p>{pet.skill2}</p>\r\n                    <p>{pet.skill3}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-2 text-center\">\r\n                    <p className=\"bigger\">Likes:</p>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <p>{pet.likes}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    {\r\n                        dis \r\n                        ?\r\n                        <button className=\"btn btn-primary ml-3\" disabled>Like this pet</button>\r\n                        : \r\n                        <button className=\"btn btn-primary ml-3\" onClick={likePet}>Like this pet</button>\r\n                    }\r\n\r\n                    <button \r\n                        className=\"btn btn-success ml-4\"\r\n                        onClick={adoptPet}\r\n                    >Adopt this pet</button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default PetDetails;","import React from 'react';\nimport { Router } from '@reach/router';\nimport CreatePet from './components/CreatePet';\nimport AllPets from './components/AllPets';\nimport EditPet from './components/EditPet';\nimport PetDetails from './components/PetDetails';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <h1>Pet Shelter</h1>\n      <Router>\n        <AllPets path=\"/\" />\n        <CreatePet path=\"/pets/new\" />\n        <EditPet path=\"/pets/:_id/edit\" />\n        <PetDetails path=\"/pets/:_id\" />\n      </Router>  \n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}